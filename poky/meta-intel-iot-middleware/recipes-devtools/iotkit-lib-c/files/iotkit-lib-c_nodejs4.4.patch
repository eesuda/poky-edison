diff --git a/cmake/modules/FindNodejs.cmake b/cmake/modules/FindNodejs.cmake
new file mode 100644
index 0000000..11e4363
--- /dev/null
+++ b/cmake/modules/FindNodejs.cmake
@@ -0,0 +1,94 @@
+ # Macro to add directory to NODEJS_INCLUDE_DIRS if it exists and is not /usr/include
+ macro(add_include_dir dir)
+    if (IS_DIRECTORY ${dir} AND NOT ${dir} STREQUAL "/usr/include")
+      set(NODEJS_INCLUDE_DIRS ${NODEJS_INCLUDE_DIRS} ${dir})
+    endif()
+endmacro()
+
+
+find_program (NODEJS_EXECUTABLE NAMES node nodejs
+    HINTS
+    $ENV{NODE_DIR}
+    PATH_SUFFIXES bin
+    DOC "Node.js interpreter"
+)
+
+include (FindPackageHandleStandardArgs)
+
+# If compat-libuv package exists, it must be at start of include path
+find_path (UV_ROOT_DIR "uv.h" PATHS /usr/include/compat-libuv010 NO_DEFAULT_PATH)
+if (UV_ROOT_DIR)
+  # set (NODEJS_INCLUDE_DIRS ${UV_ROOT_DIR})
+  add_include_dir(${UV_ROOT_DIR})
+endif()
+
+# Now look for node. Flag an error if not found
+find_path (NODE_ROOT_DIR "include/node/node.h" "include/src/node.h"
+  PATHS /usr/include/nodejs /usr/local/include/nodejs /usr/local/include)
+if (NODE_ROOT_DIR)
+  add_include_dir(${NODE_ROOT_DIR}/include/src)
+  add_include_dir(${NODE_ROOT_DIR}/include/node)
+  add_include_dir(${NODE_ROOT_DIR}/include/deps/v8/include)
+  add_include_dir(${NODE_ROOT_DIR}/include/deps/uv/include)
+else()
+  unset(NODEJS_INCLUDE_DIRS)
+  message(ERROR " - node.h not found")
+endif()
+
+# Check that v8.h is in NODEJS_INCLUDE_DIRS
+find_path (V8_ROOT_DIR "v8.h" PATHS ${NODEJS_INCLUDE_DIRS})
+if (NOT V8_ROOT_DIR)
+  unset(NODEJS_INCLUDE_DIRS)
+  message(ERROR " - v8.h not found")
+endif()
+
+# Check that uv.h is in NODEJS_INCLUDE_DIRS
+find_path (UV_ROOT_DIR "uv.h" PATHS ${NODEJS_INCLUDE_DIRS})
+if (NOT UV_ROOT_DIR)
+  unset(NODEJS_INCLUDE_DIRS)
+  message(ERROR " - uv.h not found")
+endif()
+
+find_package_handle_standard_args (Nodejs DEFAULT_MSG
+    NODEJS_EXECUTABLE
+    NODEJS_INCLUDE_DIRS
+)
+
+if (NODEJS_EXECUTABLE)
+    execute_process(COMMAND ${NODEJS_EXECUTABLE} --version
+                    OUTPUT_VARIABLE _VERSION
+                    RESULT_VARIABLE _NODE_VERSION_RESULT)
+    execute_process(COMMAND ${NODEJS_EXECUTABLE} -e "console.log(process.versions.v8)"
+                    OUTPUT_VARIABLE _V8_VERSION
+                    RESULT_VARIABLE _V8_RESULT)
+    if (NOT _NODE_VERSION_RESULT AND NOT _V8_RESULT)
+        string (REPLACE "v" "" NODE_VERSION_STRING "${_VERSION}")
+        string (REPLACE "." ";" _VERSION_LIST "${NODE_VERSION_STRING}")
+        list (GET _VERSION_LIST 0 NODE_VERSION_MAJOR)
+        list (GET _VERSION_LIST 1 NODE_VERSION_MINOR)
+        list (GET _VERSION_LIST 2 NODE_VERSION_PATCH)
+        set (V8_VERSION_STRING ${_V8_VERSION})
+        string (REPLACE "." ";" _V8_VERSION_LIST "${_V8_VERSION}")
+        list (GET _V8_VERSION_LIST 0 V8_VERSION_MAJOR)
+        list (GET _V8_VERSION_LIST 1 V8_VERSION_MINOR)
+        list (GET _V8_VERSION_LIST 2 V8_VERSION_PATCH)
+        # we end up with a nasty newline so strip everything that isn't a number
+        string (REGEX MATCH "^[0-9]*" V8_VERSION_PATCH ${V8_VERSION_PATCH})
+    else ()
+        set (NODE_VERSION_STRING "0.10.30")
+        set (NODE_VERSION_MAJOR "0")
+        set (NODE_VERSION_MINOR "10")
+        set (NODE_VERSION_PATCH "30")
+        set (V8_VERSION_MAJOR "3")
+        set (V8_VERSION_MINOR"14")
+        set (V8_VERSION_PATCH "5")
+        set (V8_VERSION_STRING "3.28.72")
+        message ("defaulted to node 0.10.30")
+    endif ()
+    string (REGEX REPLACE "\n" "" NODE_VERSION_STRING ${NODE_VERSION_STRING})
+    string (REGEX REPLACE "\n" "" V8_VERSION_STRING ${V8_VERSION_STRING})
+    message ("INFO - Node version is " ${NODE_VERSION_STRING})
+    message ("INFO - Node using v8 " ${V8_VERSION_STRING})
+    mark_as_advanced (NODEJS_EXECUTABLE)
+endif ()
+
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 7ca2363..347adfd 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -68,6 +68,7 @@ iotkit_create_install_pkgconfig (iotkit.pc lib${LIB_SUFFIX}/pkgconfig)
 install (TARGETS iotkit DESTINATION lib)
 
 if (BUILDSWIG)
+  enable_language(CXX)
   find_package (SWIG)
   if (SWIG_FOUND)
     include (${SWIG_USE_FILE})
diff --git a/src/javascript/CMakeLists.txt b/src/javascript/CMakeLists.txt
index 6721d0c..2fd92fb 100644
--- a/src/javascript/CMakeLists.txt
+++ b/src/javascript/CMakeLists.txt
@@ -1,25 +1,40 @@
-find_path (NODE_ROOT_DIR "node/node.h")
-
-set (NODE_INCLUDE_DIRS
-  ${NODE_ROOT_DIR}/src
-  ${NODE_ROOT_DIR}/node
-  ${NODE_ROOT_DIR}/deps/v8/include
-  ${NODE_ROOT_DIR}/deps/uv/include
-)
+find_package (Nodejs REQUIRED)
 
 include_directories (
-  ${NODE_INCLUDE_DIRS}
+  ${NODEJS_INCLUDE_DIRS}
   ${CMAKE_CURRENT_SOURCE_DIR}/..
 )
 
-# SWIG treats SWIG_FLAGS as a list and not a string so semicolon seperation is required
-set_source_files_properties (iotkitjs.i PROPERTIES SWIG_FLAGS "-node;-I${CMAKE_BINARY_DIR}/src")
+
+
+# SWIG treats SWIG_FLAGS as a list and not a string so semicolon seperation is
+# required. This hardcodes V8_VERSION to be <10 but I assume that's not going
+# to be a problem for a little while! SWIG uses a padded SWIG_V8 version which
+# we hack together from our findnode module.
+set (V8_VERSION_HEX 0x0${V8_VERSION_MAJOR}${V8_VERSION_MINOR}${V8_VERSION_PATCH})
+string (LENGTH "${V8_VERSION_HEX}" V8_VERSION_HEX_length)
+while (V8_VERSION_HEX_length LESS 8)
+  set (V8_VERSION_HEX "${V8_VERSION_HEX}0")
+  message (STATUS "INFO - Padded V8 version to match SWIG format")
+  string (LENGTH "${V8_VERSION_HEX}" V8_VERSION_HEX_length)
+endwhile ()
+
+set_property (SOURCE iotkitjs.i PROPERTY SWIG_FLAGS "-node"
+              "-I${CMAKE_BINARY_DIR}/src" "-DV8_VERSION=${V8_VERSION_HEX}")
 set_source_files_properties (iotkitjs.i PROPERTIES CPLUSPLUS ON)
 
+#swig_add_module (iotkitjs javascript iotkitjs.i)
 swig_add_module (iotkitjs javascript iotkitjs.i ${iotkit_LIB_SRCS})
 swig_link_libraries (iotkitjs ${NODE_LIBRARIES})
 swig_link_libraries (iotkitjs curl)
 
+
+
+# SWIG treats SWIG_FLAGS as a list and not a string so semicolon seperation is required
+set_source_files_properties (iotkitjs.i PROPERTIES SWIG_FLAGS "-node;-I${CMAKE_BINARY_DIR}/src")
+set_source_files_properties (iotkitjs.i PROPERTIES CPLUSPLUS ON)
+
+
 if (DOXYGEN_FOUND)
   foreach (_file ${DOCFILES})
     add_dependencies (${SWIG_MODULE_iotkitjs_REAL_NAME} ${_file}doc_i)
@@ -27,12 +42,36 @@ if (DOXYGEN_FOUND)
 endif ()
 
 set_target_properties (iotkitjs PROPERTIES
-  COMPILE_FLAGS "${CMAKE_CXX_FLAGS} -DBUILDING_NODE_EXTENSION"
+  COMPILE_FLAGS "${CMAKE_CXX_FLAGS} -DBUILDING_NODE_EXTENSION -DSWIGJAVASCRIPT=${SWIG_FOUND}"
   PREFIX ""
   OUTPUT_NAME iotkit
   SUFFIX ".node"
 )
 
+message (STATUS "INFO - swig Version ${SWIG_VERSION}")
+message (STATUS "INFO - CXX compiler Version ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
+
+if (${V8_VERSION_MAJOR} GREATER 3)
+  message (STATUS "INFO - Using V8 version > 3 so requiring C++11 compiler")
+  # Node 0.12.x V8 engine major version is '3'.
+  # Node 2.1.0  V8 engine major version is '4'.
+  set_property (TARGET iotkitjs PROPERTY CXX_STANDARD 11)
+  set_property (TARGET iotkitjs PROPERTY CXX_STANDARD_REQUIRED ON)
+  if (CMAKE_VERSION VERSION_LESS "3.1")
+  message (WARNING "Need to use CMAKE version 3.1+, but it is ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}, using a workaround.")
+  if (CMAKE_COMPILER_IS_GNUCXX)
+    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.7")
+      message (FATAL_ERROR "GNU gcc compiler is also too old (need 4.7+, but ${CMAKE_CXX_COMPILER_VERSION}) and does not support C++11 standard.")
+    endif ()
+    set (MRAA_CXX11_WORKAROUND_OPTION "-std=gnu++11")
+  else ()
+    set (MRAA_CXX11_WORKAROUND_OPTION "-std=c++11")
+  endif ()
+    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MRAA_CXX11_WORKAROUND_OPTION} ")
+  endif ()
+endif ()
+
+
 install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/package.json
          ${CMAKE_CURRENT_BINARY_DIR}/iotkit.node
          DESTINATION lib/node_modules/iotkit)
